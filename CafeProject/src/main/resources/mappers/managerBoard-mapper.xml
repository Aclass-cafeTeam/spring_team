<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="managerBoardmapper">

    	<resultMap type="ManagerBoard" id="managerboard_rm">
    	
    		<id property="boardNo" column="BOARD_NO"/>
    		
	      <result property="boardCode" column="BOARD_CODE" /><!-- 게시판 코드 -->
	      <result property="boardName" column="BOARD_NAME" /><!-- 게시판 이름 -->
	      <result property="boardOrder" column="BOARD_ORDER" /><!-- 게시판 순서 -->
	      <result property="boardTitle" column="BOARD_TITLE"/>
	      <result property="boardContent" column="BOARD_CONTENT"/>
	      <result property="mainCategoryNo" column="MAIN_CATEGORY_NO" /><!-- 게시판 큰(메인) 카페고리 -->
	      <result property="titleTagYN" column="TITLE_TAG_YN" /><!-- 말머리 사용 여부(사용: Y , 사용 안할 시: N) -->
	      <result property="boardForm" column="BOARD_FORM" /><!-- A: 앨범형 B: 게시판형  -->
	      <result property="boardLikeYN" column="BOARD_LIKE_YN" /><!-- 좋아요 기능여부(하는 걸로 체크:Y, 체크 안하면: N) -->
	      <result property="boardMemberLevelNo" column="MEMBER_LEVEL_NO" /><!-- 게시판별 멤버 등급 조건 외래키 부모키랑 맞아야함 2,3,4,5,6 -->
	      <result property="TypeDelFL" column="TYPE_DEL_FL" /><!-- 게시판 삭제여부(N: 삭제x / Y:삭제o) -->
	      
	      <result property="BdeleteDate" column="B_DELETE_DATE"/> 
	      <result property="BCreateDate" column="B_CREATE_DATE"/>
	      
	      <result property="memberNickname" column="MEMBER_NICKNAME"/>
	      <result property="memberEmail" column="MEMBER_EMAIL"/>
	      <result property="memberNo" column="MEMBER_NO"/>
	      <result property="profileImage" column="PROFILE_IMG"/>
	      <result property="memberLevelImage" column="MEMBER_LEVEL_IMG"/>
     	  <result property="thumbnail" column="THUMBNAIL"/>
      
	      <result property="mainCategoryName" column="MAIN_CATEGORY_NAME" /><!--  1.기본 게시판(삭제 불가) 2.여행 정보 3.질문 코너 4.갤러리 자료 -->
	      <result property="CategoryDelFL" column="CATEGORY_DEL_FL" /><!-- 대분류 메인 카페고리 삭제 유무(기본 게시판 삭제 불가)  -->

    	</resultMap>
    	
    	<!--
    	게시판 종류별로 대분류랑 다 묶어서 들고 오기
		SELECT * FROM BOARD_TYPE JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO) 
		WHERE CATEGORY_DEL_FL = 'N' AND TYPE_DEL_FL = 'N';
		대분류  
		SELECT * FROM MAIN_CATEGORY WHERE CATEGORY_DEL_FL = 'N'; 
		-->
		
    	<select id="selectBoardType" resultMap="managerboard_rm">
    	SELECT * FROM BOARD_TYPE JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO) 
		WHERE CATEGORY_DEL_FL = 'N' AND TYPE_DEL_FL = 'N'
		ORDER BY MAIN_CATEGORY_NO, BOARD_ORDER
    	</select>
    	
    	<select id="selectMainCategory" resultMap="managerboard_rm">
    	SELECT * FROM MAIN_CATEGORY WHERE CATEGORY_DEL_FL = 'N'
    	</select>
    	
		<!-- 게시판 삽입 -->
		<insert id="insertBoardType" parameterType="java.util.HashMap">
		<selectKey keyProperty="boardNo" resultType="_int" order="BEFORE">
			SELECT SEQ_BOARD_CODE.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO "BOARD_TYPE" 
		VALUES(#{boardNo},#{boardName},#{boardOrder},#{mainCategoryNo},DEFAULT,#{boardForm},DEFAULT, 2,DEFAULT)
		</insert>
		
		<select id="selectBoard" resultMap="managerboard_rm">
    	SELECT * FROM "BOARD_TYPE" WHERE BOARD_CODE = #{boardCode}
    	AND MAIN_CATEGORY_NO = #{mainCategoryNo}
    </select>
    	
    <!-- 메인 카테고리 -->
    <insert id="insertMainCategoryBoardType" parameterType="java.util.HashMap">
		INSERT INTO "MAIN_CATEGORY"
		VALUES(SEQ_MAIN_CATEGORY_NO.NEXTVAL,#{mainCategoryName},DEFAULT)
		</insert>
		
		<select id="selectAddMainCategory" resultMap="managerboard_rm">
    SELECT * FROM "MAIN_CATEGORY" 
		WHERE MAIN_CATEGORY_NO = (SELECT MAX(MAIN_CATEGORY_NO) FROM "MAIN_CATEGORY")
    </select>
    
    <!-- 메인 카테고리 수정 -->
    <update id="updateMainCategory" parameterType="java.util.HashMap">
    UPDATE "MAIN_CATEGORY" SET 
	MAIN_CATEGORY_NAME = #{mainCategoryName}
	WHERE MAIN_CATEGORY_NO = #{mainCategoryNo}	
    </update>
    <!-- 게시판 상세 수정 기본 게시판일 경우에 제목 수정 불가-->
    <update id="updateBoarddetail" parameterType="java.util.HashMap">
    UPDATE "BOARD_TYPE" SET 
	<if test="boardName != null">
	BOARD_NAME = #{boardName},  
	</if>
	TITLE_TAG_YN = #{typeDelFL},
	BOARD_LIKE_YN = #{boardLikeYN},
	MEMBER_LEVEL_NO = #{boardMemberLevelNo}
	WHERE BOARD_CODE = #{boardCode}
    </update>
    
    <!-- 게시판 삭제 -->
    <update id="deleteBoardType" parameterType="_int">
    UPDATE "BOARD_TYPE" SET 
	TYPE_DEL_FL = 'Y'
	WHERE BOARD_CODE = #{boardCode}
    </update>
    <!--게시판 삭제 시 게시글 삭제  -->
    <update id="deleteBoardTypeBoard" parameterType="_int">
    UPDATE "BOARD" SET
	BOARD_DEL_FL ='M'
	WHERE BOARD_CODE = #{boardCode}
    </update>
    
    <!-- 메인 카테고리 삭제 -->
    <update id="deletemainCategory" parameterType="_int">
    UPDATE "MAIN_CATEGORY" SET 
	CATEGORY_DEL_FL = 'Y'
	WHERE MAIN_CATEGORY_NO = #{mainCategoryNo}
    </update>
    <!-- 메인 카테고리 안에 게시판 삭제 -->
    <update id="deletemainCategoryBoardType" parameterType="_int">
    UPDATE "BOARD_TYPE" SET 
	TYPE_DEL_FL = 'Y'
	WHERE MAIN_CATEGORY_NO = #{mainCategoryNo}
    </update>
    
    <!-- 메인 카테고리 안에 게시판 삭제 시 게시글도-->
    <update id="deletemainCategoryBoard" parameterType="_int">
    UPDATE "BOARD" SET
	BOARD_DEL_FL ='M'
	WHERE BOARD_NO IN (SELECT BOARD_NO  FROM (SELECT * FROM BOARD 
	JOIN (SELECT * FROM BOARD_TYPE JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO))
	USING(BOARD_CODE)) WHERE MAIN_CATEGORY_NO = #{mainCategoryNo})
    </update>
    
    <update id="updateBoardOrderPage" parameterType="_int">
    UPDATE "BOARD_TYPE" SET
	BOARD_ORDER = #{boardOrderupdate}
	WHERE BOARD_CODE = #{boardCode}
    </update>
    
    <update id="updateNextBoardOrderPage" parameterType="_int">
    UPDATE "BOARD_TYPE" SET
	BOARD_ORDER = #{nexTBoardOrderupdate}
	WHERE BOARD_CODE = #{boardNextupdateCode}
    </update>
    <!-- 이동 기준 이전 게시판 순서로 이동(위 버튼) -->
    <update id="updateBoardOrderPageUP" parameterType="_int">
    UPDATE "BOARD_TYPE" SET
	BOARD_ORDER = #{preBoardOrderupdate}
	WHERE BOARD_CODE = #{boardCode}
    </update>
    
    <!-- 이전 게시판이 기준 게시판으로 이동(위 버튼) -->
    <update id="updatePreviousBoardOrderPageUP" parameterType="_int">
    UPDATE "BOARD_TYPE" SET
	BOARD_ORDER = #{boardOrderupdate}
	WHERE BOARD_CODE = #{preBoardOrderupdateCode}
    </update>
    
    <select id="getDeleteBoardListCount" resultType="_int">
	SELECT COUNT(*) FROM "BOARD" 
	JOIN "BOARD_TYPE" USING(BOARD_CODE)
	WHERE BOARD_DEL_FL = 'M'
	</select>
	<select id="getDeleteBoardList" resultMap="managerboard_rm">
	SELECT * FROM (SELECT BOARD_CODE,MEMBER_NO,BOARD_DEL_FL,B_DELETE_DATE,BOARD_CONTENT,BOARD_TITLE,BOARD_NO, to_char(B_CREATE_DATE,'yyyy.mm.dd') B_CREATE_DATE FROM "BOARD") 
	JOIN "BOARD_TYPE" USING(BOARD_CODE)
	JOIN (SELECT MEMBER_NO, MEMBER_NICKNAME,SUBSTR(MEMBER_EMAIL, 0, INSTR(MEMBER_EMAIL, '@')-1) MEMBER_EMAIL FROM  "MEMBER") USING(MEMBER_NO)
	WHERE BOARD_DEL_FL = 'M'
	</select>
</mapper>
